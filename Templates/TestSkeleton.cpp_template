// GENERATED BY UNMASKEDCXX

// Substitution values
// FN_NAME: The name of the tested CPP function.
// RETURN_TYPE: The return type of the function FN_NAME
// ARGUMENT_TYPES: The types of each argument of FN_NAME in order.
// NUM_TESTS_TO_RUN: The number of test iterations to run

#include <iostream>
#include <tuple>

#include "../FILE_ADDRESS"
#include "../Generators/AllGenerators.h"
#include "../Generators/GeneratorParameterStore.h"

ADDITIONAL_INCLUDES

// Returns true if and only if the contained test passed.
bool TEST_FN_NAME() {
  GeneratorParameterStore Parameters;

  RETURN_TYPE ReturnedValues[NUM_TESTS_TO_RUN]{};

  std::vector<std::tuple<ARGUMENT_TYPES>> GeneratedArguments;

  for (int i = 0; i < NUM_TESTS_TO_RUN; i++) {
    // Generate a value for every argument
    std::tuple<GENERATOR_TYPES> Generators;

    // Intentionally un-indented
PUSH_PARAMETERS_TO_STORE

    GeneratedArguments.push_back(std::make_tuple(GENERATORS_GET_VALUES));

    // Replace the named arguments when we call the function.

    ReturnedValues[i] = FN_NAME(GENERATED_ARGUMENTS);

    Parameters.ClearEverything();
  }

  if (TEST_CONDITION) {
    TEST_BODY_PASS
  }

  else {
    TEST_BODY_FAIL
  }
}