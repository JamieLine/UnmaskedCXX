// NOLINTBEGIN
INCLUDE_TESTS
#include <fstream>
#include <iostream>
#include <string>
#include <vector>

#include "../TestCreator/Structs/TestResult.h"

const std::string REPORT_FILE_NAME = "UnmaskedReport.csv";

std::string BoolToString(bool B) {
  if (B) {
    return "True";
  }
  return "False";
}

int main(int argc, char** argv) {
  // std::vector<NameResultPair> Results;
  std::vector<TestResult> Tests;

  // Intentionally de-indented for easier generation.
RUN_TESTS_AND_PUSH_RESULTS

  int NumberOfPassedTests = 0;
  for (const auto& Test : Tests) {
    std::cout << "Test name : " + Test.Name + "\n";
    std::cout << "Test type : " + Test.Type + "\n";
    std::cout << "Test passed? :" + BoolToString(Test.Passed) + "\n";
    if (Test.Passed) {
      NumberOfPassedTests++;
    }
  }

  std::cout << "Summary: " + std::to_string(NumberOfPassedTests) + "/" +
                   std::to_string(Tests.size()) + " tests passed.\n";

  std::cout << "Writing results to a report file.\n";
  std::cout << "Writing to " + REPORT_FILE_NAME;

  std::ofstream ReportFile;
  ReportFile.open(REPORT_FILE_NAME,
                  std::fstream::in | std::fstream::out | std::fstream::trunc);

  if (!ReportFile.is_open()) {
    std::cout << "Error, could not open report file\n";
    std::cout << "Report contents are given above.\n";
    std::cout << "Exiting.\n";
  }

  else {
    ReportFile << REPORT_VERSION_NUMBER;
    ReportFile << "\n";

    for (auto const& Test : Tests) {
      ReportFile << Test.Name + "," + Test.Category + "," + Test.Type + "," +
                        BoolToString(Test.Passed) + "\n";
    }

    ReportFile.close();
  }

  // Forcing a buffer flush here.
  std::cout << std::endl;
}
// NOLINTEND